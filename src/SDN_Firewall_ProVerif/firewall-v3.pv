set traceDisplay = long.
(* type *)
  type IP.
  type PORT.
  type con_mess.
  type mess_type.
  type flag.
  type PRO.

(*channel *)
  free ia_sa,sa_ia,sa_ib:channel[private].    
  free sa_sb,sb_sa:channel[private].          
  free sa_c,c_sa,sb_c,c_sb:channel[private].  
  free sb_ea,ea_sb:channel.                   

  free send_flag:flag.
  
(* table *)
  table Trusted_TABLE(IP,IP,PORT).
  table out_FIREWALL(IP).
  table in_FIREWALL(IP).

  table FLOW_TABLE_1(IP,IP,PORT,PORT,PORT).
  table FLOW_TABLE_2(IP,IP,PORT,PORT,PORT).
(*IP port*)
  free InAIP:IP[private]. 
  free InBIP:IP[private].
  free ExAIP:IP[private].
  free InAP1,InAP2,InBP,ExAP1:PORT[private].
  free Reply,Send:con_mess[private].

  free S1_to_L_FMD,S2_to_R_FMD:mess_type.
  free S1_to_S2_FMD,S2_to_S1_FMD:mess_type.
  free TCP,UDP:PRO.
  free data,pkt_in,outside,inside,flow_mod,pkt_drop,FD:mess_type.
(* event *)
 
  event IntoEx(IP).
  event ExtoIn(IP).
  event InAtoExA(IP).
  event ExAtoInA(IP).
  event ExAtoInAP2(IP,PORT).
  event InAtoExAP1(IP,PORT).
  event  ExAtoInAPro2(IP,PORT,PRO).
  event  InAtoExAPro1(IP,PORT,PRO).

  event trustExAIP(IP).
 
  event InBtoExA.
  event ExAtoInB. 

  event ExAtoInA_begin.
  event InAtoExA_before.
  event ExAtoInB_begin.
  event ExArece.
  event S2toC_I2O.
  event S2toC_O2I.
  event sa_i2o.
  event sa_o2i.

  event S1toL1.
  event RsendL3.
  event RsendL2.
  event CONTROLLER2_R_L.
(* query *)

query x:IP;event(ExAtoInA(x))==> event(InAtoExA(x)).     (*Internal network security *)

query h1,h2:IP;event(ExtoIn(h1))&&event(IntoEx(h2))==> h1=h2.      (*Host security property *) 

query x:IP,p1,p2:PORT;event(ExAtoInAP2(x,p2))&&event(InAtoExAP1(x,p1))==>p1=p2.  (*Port Security*)

query x:IP,p:PORT,z1,z2:PRO;event(ExAtoInAPro2(x,p,z2))&&event(InAtoExAPro1(x,p,z1))==>z1=z2.  (*Protocol Security*)

let InA()=
  
    event InAtoExA(InAIP);
    event IntoEx(InAIP);
    event InAtoExAP1(InAIP,InAP1);
    event InAtoExAPro1(InAIP,InAP1,TCP);

    let M1:bitstring=(InAIP,ExAIP,InAP1,ExAP1,TCP,Send,data) in
    out(ia_sa,M1);
   
    in(sa_ia,L1recv:bitstring);
    let (L1recv_srcIP:IP,L1recv_dstIP:IP,L1recv_srcPORT:PORT,L1recv_dstPORT:PORT,
    L1recv_pro:PRO,L1recv_con:con_mess,L1recv_type:mess_type)=L1recv in
    if(L1recv_srcIP=ExAIP&&L1recv_dstIP=InAIP) then
       event ExAtoInA(L1recv_dstIP);
       event ExtoIn(L1recv_dstIP);
       event ExAtoInAP2(L1recv_dstIP,L1recv_dstPORT);
       event ExAtoInAPro2(L1recv_dstIP,L1recv_dstPORT,L1recv_pro);
   0.

let InB=

  in(sa_ib,L2recv:bitstring);

  let (L2recv_srcIP:IP,L2recv_dstIP:IP,L2recv_srcPORT:PORT,L2recv_dstPORT:PORT,
  L2recv_pro:PRO,L2recv_con:con_mess,L2recv_type:mess_type)=L2recv in 

  if(L2recv_srcIP=ExAIP&&L2recv_dstIP=InBIP) then
  if(L2recv_con=Send) then
     event ExAtoInB;
     event ExtoIn(L2recv_dstIP).

let switchA() =

  (
    event sa_i2o;
    in(ia_sa,L1M1:bitstring);        
    
    out(sa_c,L1M1); 
            
    in(c_sa,(L1M2:bitstring,FWD:mess_type,fd1:mess_type)); 

    if(FWD=S1_to_S2_FMD) then
       
     out(sa_sb,L1M2)  
  )|(
    in(sb_sa,S2toS1:bitstring);

     event sa_o2i;
     out(sa_c,S2toS1);
     in(c_sa,(CtoS1:bitstring,FMD2:mess_type,fd2:mess_type));

    let (CtoS1_srcIP:IP,CtoS1_dstIP:IP,CtoS1_srcPORT:PORT,CtoS1_dstPORT:PORT,
    CtoS1_Pro:PRO,CtoS1_con:con_mess,CtoS1_type:mess_type)=CtoS1 in
     get out_FIREWALL(=CtoS1_srcIP) in

     if(FMD2=S1_to_L_FMD)then 
     if(CtoS1_dstIP=InAIP) then  
     event S1toL1;

     out(sa_ia,CtoS1)
     else 
      event RsendL3;
      out(sa_ib,CtoS1);
     0
  ).  

let switchB() =
  
  ( 
  in(sa_sb,S1toS2m:bitstring);
   
  out(sb_c,S1toS2m); 

  in(c_sb,(CtoS2M2:bitstring,FMD1:mess_type,fd3:mess_type));

    if(FMD1=S2_to_R_FMD) then
    
    out(sb_ea,CtoS2M2);  
    0
 )|( 

   in(ea_sb,RtoS2:bitstring);
    
         
    out(sb_c,RtoS2);

    in(c_sb,(CtoS2:bitstring,FMD3:mess_type,fd4:mess_type));
    
    if(FMD3=S2_to_S1_FMD) then
    
    out(sb_sa,CtoS2); 
0
).

let controller()=

  (  (*S1-C *)
 
    in(sa_c,S1toC:bitstring);
    let (S1toC_srcIP:IP,S1toC_dstIP:IP,S1toC_srcPORT:PORT,S1toC_dstPORT:PORT,
  S1toC_Pro:PRO,S1toC_con:con_mess,S1toC_type:mess_type)=S1toC in
    (
        (*S1-C *)
     
        get in_FIREWALL(=S1toC_srcIP) in
        get out_FIREWALL(=S1toC_dstIP) in
        get Trusted_TABLE(=S1toC_dstIP,=S1toC_srcIP,=S1toC_srcPORT) in
     
          0
        else
        
        insert Trusted_TABLE(S1toC_dstIP,S1toC_srcIP,S1toC_srcPORT); 
        event trustExAIP(S1toC_dstIP);         
        out(c_sa,(S1toC,S1_to_S2_FMD,FD)) 
    )|(
         (*S1-C  *)
        get out_FIREWALL(=S1toC_srcIP) in
        get in_FIREWALL(=S1toC_dstIP) in
        event CONTROLLER2_R_L; 
        out(c_sa,((S1toC,S1_to_L_FMD,FD))) 
         
    )     

 )|(
  (*S2-C *)
 
    in(sb_c,S2toC:bitstring);
    let (S2toC_srcIP1:IP,S2toC_dstIP1:IP, S2toC_srcPORT:PORT,S2toC_dstPORT:PORT,
    S2toC_Pro:PRO,S2toC_con1:con_mess,S2toC_type1:mess_type)=S2toC in
      (   
        (*S2-C*)
        get out_FIREWALL(=S2toC_srcIP1) in
        get in_FIREWALL(=S2toC_dstIP1) in 
        get Trusted_TABLE(=S2toC_srcIP1,=S2toC_dstIP1,=S2toC_dstPORT) in 
             event S2toC_O2I;         
            out(c_sb,(S2toC,S2_to_S1_FMD,FD))
          else
            out(c_sb,(S2toC,pkt_drop));               
              0
    )|(  
        (*S2-C*)
        get in_FIREWALL(=S2toC_srcIP1) in   
        get out_FIREWALL(=S2toC_dstIP1) in
        event S2toC_I2O;
        out(c_sb,(S2toC,S2_to_R_FMD,FD));
          0                                      
      )
    
   ).

let ExA()=

(
  let ExAmess0:bitstring=(ExAIP,InAIP,ExAP1,InAP2,UDP,Send,data) in 
  event InAtoExA_before;
  out(ea_sb,ExAmess0);
  0

)|(
    (*REMOTE receive from Local_1*)
    in(sb_ea,Rrecv:bitstring);
    event ExArece;
    let (Rrecv1:IP,Rrecv2:IP,Rrecv3:PORT,Rrecv4:PORT,
    Rrecv5:con_mess,Rrecv6:mess_type)=Rrecv in
    
    if(Rrecv1=InAIP&&Rrecv2=ExAIP) then
     
    let  ExAmess1:bitstring=(ExAIP,InAIP,ExAP1,InAP1,UDP,Reply,data) in
    out(ea_sb,ExAmess1);

    event ExAtoInB_begin;
    let  ExAmess2:bitstring=(ExAIP,InAIP,ExAP1,InAP1,UDP,Send,data) in
    out(ea_sb,ExAmess2);

        0
   ). 
  

process
  insert out_FIREWALL(ExAIP);             
  insert in_FIREWALL(InAIP);
  insert in_FIREWALL(InBIP);
   InA()| InB()| !switchA()| !controller()| !switchB()| ExA()
